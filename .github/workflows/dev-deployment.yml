name: Test Dev CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev

permissions:
  id-token: write
  contents: read

env:
  REGION: ap-southeast-1
  ECR_REPO: 567630311114.dkr.ecr.ap-southeast-1.amazonaws.com/helicap-test-repo
  DEV_ASSUME_ROLE_ARN: arn:aws:iam::615908245893:role/helicap-github-deployment-dev
  DEV_ECS_CLUSTER_NAME: helicap-dev
  DEV_ECS_SERVICE_NAME: Deployment-Test
  DEV_TASK_ROLE_ARN: arn:aws:iam::615908245893:role/helicap-dev-analytics-task-role
  DEV_ECS_TD_NAME: deploy-test
  GITHUB_ACTIONS_ROLE_ARN: arn:aws:iam::567630311114:role/Gitlab-test-oidc

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.REGION }}
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_REPO || { echo "ECR login failed"; exit 1; }
      - name: Build and Push Image (Test Repo)
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t $ECR_REPO:latest . || { echo "Docker build failed"; exit 1; }
          docker tag $ECR_REPO:latest $ECR_REPO:$IMAGE_TAG
          docker push $ECR_REPO:latest || { echo "Docker push failed"; exit 1; }
          docker push $ECR_REPO:$IMAGE_TAG || { echo "Docker push failed"; exit 1; }
      - name: Clean up old ECR images
        run: |
          aws ecr batch-delete-image --repository-name $(echo $ECR_REPO | cut -d'/' -f2) --image-ids "$(aws ecr list-images --repository-name $(echo $ECR_REPO | cut -d'/' -f2) --filter tagStatus=UNTAGGED --query 'imageIds[*]' --output json)" || echo "No untagged images to delete"

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.DEV_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.REGION }}
      - name: List ECS Clusters and Services
        run: |
          echo "Listing ECS clusters in dev account..."
          # IMAGE_TAG=$(git rev-parse --short HEAD)
          # DEV_ECS_TD=$(aws ecs describe-services --cluster "${DEV_ECS_CLUSTER_NAME}" --services "${DEV_ECS_SERVICE_NAME}" --region "${REGION}" | python3 -c 'import sys,json;data=json.loads(sys.stdin.read()); print(data["services"][0]["taskDefinition"])') || { echo "Failed to get service"; exit 1; }
          # TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$DEV_ECS_TD" --region "${REGION}") || { echo "Failed to get task definition"; exit 1; }
          # NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REPO:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
          # DEV_ECS_TD_NEW=$(aws ecs register-task-definition --region "${REGION}" --family "${DEV_ECS_TD_NAME}" --container-definitions "${NEW_CONTAINER_DEFINITION}" --task-role-arn "${DEV_TASK_ROLE_ARN}" --execution-role-arn "${DEV_TASK_ROLE_ARN}" | python3 -c 'import sys,json;data=json.loads(sys.stdin.read()); print(data["taskDefinition"]["taskDefinitionArn"])') || { echo "Failed to register task definition"; exit 1; }
          # aws ecs update-service --region "${REGION}" --cluster "${DEV_ECS_CLUSTER_NAME}" --service "${DEV_ECS_SERVICE_NAME}" --task-definition "${DEV_ECS_TD_NEW}" || { echo "Failed to update service"; exit 1;}
          IMAGE_TAG=$(echo "$GITHUB_SHA" | cut -c1-7)
          DEV_ECS_TD=$(aws ecs describe-services --cluster "${DEV_ECS_CLUSTER_NAME}" --services "${DEV_ECS_SERVICE_NAME}" --region "${REGION}" | python3 -c 'import sys,json;data=json.loads(sys.stdin.read()); print(data["services"][0]["taskDefinition"])') || { echo "Failed to get service"; exit 1; }
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$DEV_ECS_TD" --region "${REGION}") || { echo "Failed to get task definition"; exit 1; }
          UPDATED_TASK_DEF=$(echo "$TASK_DEFINITION" | jq --arg IMAGE "$ECR_REPO:$IMAGE_TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)')
          DEV_ECS_TD_NEW=$(aws ecs register-task-definition --region "${REGION}" --cli-input-json "${UPDATED_TASK_DEF}" | python3 -c 'import sys,json;data=json.loads(sys.stdin.read()); print(data["taskDefinition"]["taskDefinitionArn"])') || { echo "Failed to register task definition"; exit 1; }
          aws ecs update-service --region "${REGION}" --cluster "${DEV_ECS_CLUSTER_NAME}" --service "${DEV_ECS_SERVICE_NAME}" --task-definition "${DEV_ECS_TD_NEW}" || { echo "Failed to update service"; exit 1; }
          aws ecs wait services-stable --region "${REGION}" --cluster "${DEV_ECS_CLUSTER_NAME}" --services "${DEV_ECS_SERVICE_NAME}"
